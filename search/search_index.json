{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Glimmr Glimmr Programming language A fresh take at programming Glimmr is a new functional programming language designed to bring the elegance and power of functional programming to a wider audience. Inspired by Ocaml's strong type system, Haskell's immutability, and emphasis on pure functions, Glimmr offers a familiar syntax, making it approachable for programmers coming from other languages. What makes Glimmr unique Familiar Syntax - Glimmr adopts a syntax that's intuitive and easy to learn for programmers accustomed to mainstream languages. Powerful Type System: Glimmr boasts a robust type system that catches errors at compile time, leading to more reliable and robust applications. Pure Functional Paradigm: Glimmr encourages a declarative programming style, making your code easier to reason about, test, and parallelize. Modern Features: Glimmr incorporates modern functional programming features such as higher-order functions, currying, pattern matching, and algebraic data types, enabling you to write expressive and efficient code. Interoperability: We aim for seamless interoperability with JavaScript Who is Glimmr for? Glimmr is perfect for: Experienced programmers , Students Learning functional programming and Anyone Interested in exploring the power of functional programming with a less steep learning curve. Code Snippet import std::io { println } fn main() : Unit = println(\"Hello, world\") Get Started Dive in and explore the documentation to learn more about Glimmr's features, syntax, and standard library. Start building amazing applications today! Let's glimmr into the future of functional programming!","title":"Welcome"},{"location":"#welcome-to-glimmr","text":"","title":"Welcome to Glimmr"},{"location":"#what-makes-glimmr-unique","text":"Familiar Syntax - Glimmr adopts a syntax that's intuitive and easy to learn for programmers accustomed to mainstream languages. Powerful Type System: Glimmr boasts a robust type system that catches errors at compile time, leading to more reliable and robust applications. Pure Functional Paradigm: Glimmr encourages a declarative programming style, making your code easier to reason about, test, and parallelize. Modern Features: Glimmr incorporates modern functional programming features such as higher-order functions, currying, pattern matching, and algebraic data types, enabling you to write expressive and efficient code. Interoperability: We aim for seamless interoperability with JavaScript","title":"What makes Glimmr unique"},{"location":"#who-is-glimmr-for","text":"Glimmr is perfect for: Experienced programmers , Students Learning functional programming and Anyone Interested in exploring the power of functional programming with a less steep learning curve.","title":"Who is Glimmr for?"},{"location":"#code-snippet","text":"import std::io { println } fn main() : Unit = println(\"Hello, world\")","title":"Code Snippet"},{"location":"#get-started","text":"Dive in and explore the documentation to learn more about Glimmr's features, syntax, and standard library. Start building amazing applications today! Let's glimmr into the future of functional programming!","title":"Get Started"},{"location":"firstprogram/","text":"Hello glimmr Once again, welcome to the language reference of the glimmr programming language. If you have made it here I assume everything went well. If not, you can still follow but it is rather productive to learn practically. In this document we are going to discuss a basic glimr program, hello world. import std::io { println } // Entry point fn main() : Unit = println(\"Hello, world\") Explanation The first line import a module from the standard library and pulls the println function into the current module scope. Modules are discussed in later sections. On line 3 we can see a single line comment starting with // . On line 4 we are declaring a function named main with no arguments that returns type Unit and the body is simple a call to the println function with the string literal Hello, world passed as a parameter. Coding Paradigm It has been said a countless times at this point that glimr is a functional language. Functions are the basic blocks for building programs. You can compose functions to create complex applications. Functions also be passed to and returned from other functions. Combined with the flexible type system, this makes glimmr a great choice for developing safe applications. Coding styles Glimr is a free form language. The syntax allows you to use white space to your in your style. You can declare all expressions in a single line or separate it for readability. Observe below: Single line form fn main() : Unit = println(\"Hello, world\") VS Multi line form fn main() : Unit = println(\"Hello, world\") You will decide how you want to format your code, we do impose any coding standard or style on you. Do you. Whats next? Lets dive into our first core topic of the glimmr programming language, Types . Lets gooo!","title":"First Program"},{"location":"firstprogram/#hello-glimmr","text":"Once again, welcome to the language reference of the glimmr programming language. If you have made it here I assume everything went well. If not, you can still follow but it is rather productive to learn practically. In this document we are going to discuss a basic glimr program, hello world. import std::io { println } // Entry point fn main() : Unit = println(\"Hello, world\")","title":"Hello glimmr"},{"location":"firstprogram/#explanation","text":"The first line import a module from the standard library and pulls the println function into the current module scope. Modules are discussed in later sections. On line 3 we can see a single line comment starting with // . On line 4 we are declaring a function named main with no arguments that returns type Unit and the body is simple a call to the println function with the string literal Hello, world passed as a parameter.","title":"Explanation"},{"location":"firstprogram/#coding-paradigm","text":"It has been said a countless times at this point that glimr is a functional language. Functions are the basic blocks for building programs. You can compose functions to create complex applications. Functions also be passed to and returned from other functions. Combined with the flexible type system, this makes glimmr a great choice for developing safe applications.","title":"Coding Paradigm"},{"location":"firstprogram/#coding-styles","text":"Glimr is a free form language. The syntax allows you to use white space to your in your style. You can declare all expressions in a single line or separate it for readability. Observe below:","title":"Coding styles"},{"location":"firstprogram/#single-line-form","text":"fn main() : Unit = println(\"Hello, world\") VS","title":"Single line form"},{"location":"firstprogram/#multi-line-form","text":"fn main() : Unit = println(\"Hello, world\") You will decide how you want to format your code, we do impose any coding standard or style on you. Do you.","title":"Multi line form"},{"location":"firstprogram/#whats-next","text":"Lets dive into our first core topic of the glimmr programming language, Types . Lets gooo!","title":"Whats next?"},{"location":"install/","text":"Get Glimmr Pre-built Binaries Glimmr is currently only available through source, pre-built binaries are not available, so in order to try out glimmr you will have to build it yourself. Luckily the build process is very simple. Follow the build steps below. Build from source To compile the glimmr compiler you have to first get the source code. $ git clone https://github.com/Glimmr-Lang/Glimmr Then run the following commands: $ cd Glimmr $ mvn package The glimr compiler should then be compiled and packaged into a .jar file that is ready to use. There is a very useful shell script on the root of the directory, named glmr , this script is the entry point of the compiler. An install script will be included in future releases. Install You can copy the glimmr folder to any place on your computer and make sure to add it to the path so that the glimmr compiler can be invoked from any working directory in the terminal. If everything went well try running the following command on your terminal. $ glmr --h If glimmr is installed properly you should see a wall of text scroll up, quickly followed by a word art created in ASCII. If not try following the build steps one more time. You can also test the installation by running the following command $ glmr --version IMPORTANT : Please note that glimmr is still a work in progress, so bugs and unfinished features are expected. If you would like to contribute to glimmr submit a pull request on github . Thank you Whats next? Now that your are ready to start your glimmr journey let me not hold you back. Its coding time!","title":"Installation"},{"location":"install/#get-glimmr","text":"","title":"Get Glimmr"},{"location":"install/#pre-built-binaries","text":"Glimmr is currently only available through source, pre-built binaries are not available, so in order to try out glimmr you will have to build it yourself. Luckily the build process is very simple. Follow the build steps below.","title":"Pre-built Binaries"},{"location":"install/#build-from-source","text":"To compile the glimmr compiler you have to first get the source code. $ git clone https://github.com/Glimmr-Lang/Glimmr Then run the following commands: $ cd Glimmr $ mvn package The glimr compiler should then be compiled and packaged into a .jar file that is ready to use. There is a very useful shell script on the root of the directory, named glmr , this script is the entry point of the compiler. An install script will be included in future releases.","title":"Build from source"},{"location":"install/#install","text":"You can copy the glimmr folder to any place on your computer and make sure to add it to the path so that the glimmr compiler can be invoked from any working directory in the terminal. If everything went well try running the following command on your terminal. $ glmr --h If glimmr is installed properly you should see a wall of text scroll up, quickly followed by a word art created in ASCII. If not try following the build steps one more time. You can also test the installation by running the following command $ glmr --version IMPORTANT : Please note that glimmr is still a work in progress, so bugs and unfinished features are expected. If you would like to contribute to glimmr submit a pull request on github . Thank you","title":"Install"},{"location":"install/#whats-next","text":"Now that your are ready to start your glimmr journey let me not hold you back. Its coding time!","title":"Whats next?"}]}